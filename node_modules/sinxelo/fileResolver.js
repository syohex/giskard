/*jslint node:true, devel: true, plusplus: true, vars: true */
/*global config */

'use strict';

var events = require('events'),
    fs = require('fs');


/**
 * Resolver for files. Extends event emitter
 */
module.exports = Object.create(events.EventEmitter.prototype, {
    
    /**
     * Read the given file and expose its contents firing and event
     * @method
     * @public
     * @param {String} file Path to the file
     */
    read: {value: function (file) {
        
        var self = this;

        fs.readFile(file, function (err, data) {
            if (err) {
                self.emit('error', {code: 500, message: err, context: {file: file}});
            } else {
                self.emit('read', {data: data, file: file});
            }
        });
    }},
    
    /**
     * Check if a file exists. If exists load the file if not emit an 404 error event
     * @method
     * @public
     * @param {String} file Path to the file
     */ 
    check: { value: function (file) {

        var self = this;
        
        fs.exists(file, function (exists) {
            if (exists) {
                self.read(file);
            } else {
                self.emit('error', {code: 404, message: 'Not found', context: {file: file}});
                
            }
        });
        
    }},
    
    /**
     * Resolve the path and load the file contents
     * @method
     * @public
     * @param {String} file
     */
    resolve: { value: function (file) {
        
        var self = this,
            exists;
        self.check(file);
    }}
});
