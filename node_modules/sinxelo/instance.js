/*jslint node:true, devel: true, plusplus: true, vars: true */
/*global config */

'use strict';

var util = require('util');
var events = require('events');
var http = require('http');
var url = require('url');
var path = require('path');
var fs = require('fs');
var domains = require("domain");
var mime = require('./mime');

var server = {

	server: {
		value: http.createServer()
	},

	root: {
		value: ''
	},

	handleError: {
		enumerable: false,
		value: function (res, code, error) {
            
            var self = this;
			
            if (code === 404) {
                self.showFileContent(res, require.resolve('sinxelo/404.html'), self, code);
            } else if (code === 500) {
                self.showFileContent(res, require.resolve('sinxelo/500.html'), self, code);
            } else {
                res.write(error.message);
                res.end();
            }
            
            return false;
		}
	},

    /*
	printVar: {
		enumerable: false,
		value: function (value) {

			var result = '';

			var values = {
				'pepito': 'ok',
				'manolito': 'nice'
			};

			result = values[value.trim()];

			return result;
		}
	},
    
	loadTemplates: {
		enumerable: false,
		value: function (content, context) {

			var that = this,
                match;

			var prints = /<\?\s*(print\s+(.*))\s*\?>/g;
			var imports = /<\?\s*(import\s+'(.*)')\s*\?>/g;

			var result = content.replace(prints, function (match, p1, p2, index, string) {
				return that.printVar(p2);
			});

            
			var hasTemplates = false;
            match = imports.exec(content);
            
			while (match) {
				var file = path.join(this.basePath,  match[2]);
				var str = match[0];
				hasTemplates = true;

				fs.exists(file, function (exists) {

					if (exists) {

						fs.readFile(file, function (err, data) {


							if (err) {
								//context.handleError(res, 500, "Error reading file " + file);
								result = content.replace(str, '!!!Error reading template ' + file);
							} else {
								result = content.replace(str, data.toString("utf-8"));
							}
						});

					} else {
						result = content.replace(str, '');
					}
				});
                
                match = imports.exec(content);
			}
            
			if (hasTemplates) {
				return false;
			} else {
				return result;
			}
            
            return result;
			
		}
	},
    */

	handleRequest: {
		enumerable: false,
		value: function (req, res, context) {
            
            var self = this,
                urlData = url.parse(req.url, true),
                href = urlData.href,
                query = urlData.query,
                file = path.join(this.basePath + (href && href !== '/' ? href : '/index.html'));
            
            var fileResolver = require('./fileResolver');
            
            fileResolver.on('error', function () {
                //self.handleError(res, 500, err);
                console.log(arguments);
            });
            
            fileResolver.on('read', function (event) {

                var ext = path.extname(file).replace('.', '');
                var type = mime.type(ext);
                
                if (type) {
                    
                    /*
                    if (type === 'text/html') {
                        var content = event.data.toString("utf-8");
                        event.data = self.loadTemplates(content, context);
                    }
                    */
                    
                    res.setHeader("Content-Type", type);
                }

                res.statusCode = 200;

                res.write(event.data);
                res.end();
            });
            
            console.log(file);
            fileResolver.resolve(file);
		}
	},

	start: {
		value: function (root, port) {

			var self = this;
            
			this.basePath = root;

			this.server.on('request', function onRequest(req, res) {

				var domain = domains.create();
				
				domain.on('error', function (err) {
                    console.log(err);
                    console.log(err.stack());
					self.handleError(res, 500, err);
					domain.dispose();
				});

				domain.enter();
				self.handleRequest(req, res, self);
			});

			this.server.listen(port || 80);
		}
	}
};

// Create the instance
var instance = Object.create(events.EventEmitter.prototype, server);

// Get the config object
var config = JSON.parse(process.env.config);

// Initialize the instance
instance.start(config.path, config.port);
